[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "imutils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imutils",
        "description": "imutils",
        "detail": "imutils",
        "documentation": {}
    },
    {
        "label": "structural_similarity",
        "importPath": "skimage.metrics",
        "description": "skimage.metrics",
        "isExtraImport": true,
        "detail": "skimage.metrics",
        "documentation": {}
    },
    {
        "label": "mse",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def mse(imageA, imageB):\n    # the 'Mean Squared Error' between the two images is the\n    # sum of the squared difference between the two images;\n    # NOTE: the two images must have the same dimension\n    err = np.sum((imageA.astype(\"float\") - imageB.astype(\"float\")) ** 2)\n    err /= float(imageA.shape[0] * imageA.shape[1])\n    # return the MSE, the lower the error, the more \"similar\"\n    # # the two images are\n    return err\ndef compare_images(imageA, imageB, title):",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "compare_images",
        "kind": 2,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "def compare_images(imageA, imageB, title):\n    # compute the mean squared error and structural similarity\n    # index for the images\n    m = mse(imageA, imageB)\n    s = ssim(imageA, imageB)\n    # setup the figure\n    fig = plt.figure(title)\n    plt.suptitle(\"MSE: %.2f, SSIM: %.2f\" % (m, s))\n    # show first image\n    ax = fig.add_subplot(1, 2, 1)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "original",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "original = cv2.imread(\"C:/Users/PC/.spyder-py3/projects/project1/vv.png\")\ncontrast = cv2.imread(\"C:/Users/PC/.spyder-py3/projects/project1/tryv.png\")\n# compute difference\ndifference = cv2.subtract(original, contrast)\n# color the mask red\nConv_hsv_Gray = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)\nret, mask = cv2.threshold(Conv_hsv_Gray, 0, 255,\n                          cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\ndifference[mask != 255] = [0, 0, 255]\n# add the red mask to the images to make the differences obvious",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "contrast",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "contrast = cv2.imread(\"C:/Users/PC/.spyder-py3/projects/project1/tryv.png\")\n# compute difference\ndifference = cv2.subtract(original, contrast)\n# color the mask red\nConv_hsv_Gray = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)\nret, mask = cv2.threshold(Conv_hsv_Gray, 0, 255,\n                          cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\ndifference[mask != 255] = [0, 0, 255]\n# add the red mask to the images to make the differences obvious\noriginal[mask != 255] = [0, 0, 255]",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "difference",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "difference = cv2.subtract(original, contrast)\n# color the mask red\nConv_hsv_Gray = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)\nret, mask = cv2.threshold(Conv_hsv_Gray, 0, 255,\n                          cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\ndifference[mask != 255] = [0, 0, 255]\n# add the red mask to the images to make the differences obvious\noriginal[mask != 255] = [0, 0, 255]\ncontrast[mask != 255] = [0, 0, 255]\ncv2.imwrite(",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "Conv_hsv_Gray",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "Conv_hsv_Gray = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)\nret, mask = cv2.threshold(Conv_hsv_Gray, 0, 255,\n                          cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)\ndifference[mask != 255] = [0, 0, 255]\n# add the red mask to the images to make the differences obvious\noriginal[mask != 255] = [0, 0, 255]\ncontrast[mask != 255] = [0, 0, 255]\ncv2.imwrite(\n    'C:/Users/PC/.spyder-py3/projects/project1/diffOverImage2.png', contrast)\n# Script to Thirdcolor",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "image",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "image = cv2.imread(\n    \"C:/Users/PC/.spyder-py3/projects/project1/diffOverImage2.png\")\nhsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n# Define lower and uppper limits of what we call \"gray 118\"\nbrown_lo = np.array([0, 0, 118])\nbrown_hi = np.array([118, 118, 118])\n# Mask image to only select grays 118\nmask = cv2.inRange(hsv, brown_lo, brown_hi)\n# Change image to yellow where we found missed\nimage[mask > 0] = (0, 255, 255)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "hsv",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n# Define lower and uppper limits of what we call \"gray 118\"\nbrown_lo = np.array([0, 0, 118])\nbrown_hi = np.array([118, 118, 118])\n# Mask image to only select grays 118\nmask = cv2.inRange(hsv, brown_lo, brown_hi)\n# Change image to yellow where we found missed\nimage[mask > 0] = (0, 255, 255)\ncv2.imwrite(\"C:/Users/PC/.spyder-py3/projects/project1/see.png\", image)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "brown_lo",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "brown_lo = np.array([0, 0, 118])\nbrown_hi = np.array([118, 118, 118])\n# Mask image to only select grays 118\nmask = cv2.inRange(hsv, brown_lo, brown_hi)\n# Change image to yellow where we found missed\nimage[mask > 0] = (0, 255, 255)\ncv2.imwrite(\"C:/Users/PC/.spyder-py3/projects/project1/see.png\", image)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "brown_hi",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "brown_hi = np.array([118, 118, 118])\n# Mask image to only select grays 118\nmask = cv2.inRange(hsv, brown_lo, brown_hi)\n# Change image to yellow where we found missed\nimage[mask > 0] = (0, 255, 255)\ncv2.imwrite(\"C:/Users/PC/.spyder-py3/projects/project1/see.png\", image)",
        "detail": "home",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 5,
        "importPath": "home",
        "description": "home",
        "peekOfCode": "mask = cv2.inRange(hsv, brown_lo, brown_hi)\n# Change image to yellow where we found missed\nimage[mask > 0] = (0, 255, 255)\ncv2.imwrite(\"C:/Users/PC/.spyder-py3/projects/project1/see.png\", image)",
        "detail": "home",
        "documentation": {}
    }
]